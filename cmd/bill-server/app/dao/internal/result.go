// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"
	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// ResultDao is the data access object for table result.
type ResultDao struct {
	Table   string          // Table is the underlying table name of the DAO.
	Group   string          // Group is the database configuration group name of current DAO.
	Columns ResultColumns // Columns contains all the column names of Table for convenient usage.
}

// ResultColumns defines and stores column names for table result.
type ResultColumns struct {
	Id               string //                     
    InvoiceNumber    string // 发票号码            
    InvoiceCode      string // 发票代码            
    CheckCode        string // 校验码              
    TotalTax         string // 总税额              
    InvoiceDate      string // 开票日期            
    AmountInWords    string // 总金额 文字         
    TotalAmount      string // 合计金额（不含税）  
    AmountInFigures  string // 总金额 数字         
    Province         string // 省份                
    InvoiceType      string // 发票类型            
    SellerName       string // 卖方名称            
    ParseType        string // qrcode\baidu\ocr
}

//  resultColumns holds the columns for table result.
var resultColumns = ResultColumns{
	Id:              "id",                 
            InvoiceNumber:   "invoice_number",     
            InvoiceCode:     "invoice_code",       
            CheckCode:       "check_code",         
            TotalTax:        "total_tax",          
            InvoiceDate:     "invoice_date",       
            AmountInWords:   "amount_in_words",    
            TotalAmount:     "total_amount",       
            AmountInFigures: "amount_in_figures",  
            Province:        "province",           
            InvoiceType:     "invoice_type",       
            SellerName:      "seller_name",        
            ParseType:       "parse_type",
}

// NewResultDao creates and returns a new DAO object for table data access.
func NewResultDao() *ResultDao {
	return &ResultDao{
		Group:   "default",
		Table:   "result",
		Columns: resultColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *ResultDao) DB() gdb.DB {
	return g.DB(dao.Group)
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *ResultDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.Table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *ResultDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}